{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6eb26237",
   "metadata": {},
   "outputs": [],
   "source": [
    "#используемые библиотеки для работы\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import networkx as nx\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import torch.nn.functional as F\n",
    "import torch_geometric\n",
    "from torch.utils.data import DataLoader\n",
    "from torch_geometric.data import Data\n",
    "from torch_geometric.nn import GCNConv\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import CountVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "18ad426a",
   "metadata": {},
   "outputs": [],
   "source": [
    "ds = pd.read_csv('/Users/Acer/OneDrive/Документы/dataset.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3b4d4713",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Marital status</th>\n",
       "      <th>Application mode</th>\n",
       "      <th>Application order</th>\n",
       "      <th>Course</th>\n",
       "      <th>Daytime/evening attendance</th>\n",
       "      <th>Previous qualification</th>\n",
       "      <th>Nacionality</th>\n",
       "      <th>Mother's qualification</th>\n",
       "      <th>Father's qualification</th>\n",
       "      <th>Mother's occupation</th>\n",
       "      <th>...</th>\n",
       "      <th>Curricular units 2nd sem (credited)</th>\n",
       "      <th>Curricular units 2nd sem (enrolled)</th>\n",
       "      <th>Curricular units 2nd sem (evaluations)</th>\n",
       "      <th>Curricular units 2nd sem (approved)</th>\n",
       "      <th>Curricular units 2nd sem (grade)</th>\n",
       "      <th>Curricular units 2nd sem (without evaluations)</th>\n",
       "      <th>Unemployment rate</th>\n",
       "      <th>Inflation rate</th>\n",
       "      <th>GDP</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1389</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "      <td>3</td>\n",
       "      <td>10.600000</td>\n",
       "      <td>4</td>\n",
       "      <td>10.8</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.74</td>\n",
       "      <td>Enrolled</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3315</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>14.200000</td>\n",
       "      <td>0</td>\n",
       "      <td>7.6</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.32</td>\n",
       "      <td>Graduate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1201</th>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>27</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>12.166667</td>\n",
       "      <td>0</td>\n",
       "      <td>9.4</td>\n",
       "      <td>-0.8</td>\n",
       "      <td>-3.12</td>\n",
       "      <td>Graduate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3450</th>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>27</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>12.125000</td>\n",
       "      <td>0</td>\n",
       "      <td>16.2</td>\n",
       "      <td>0.3</td>\n",
       "      <td>-0.92</td>\n",
       "      <td>Enrolled</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1089</th>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>15.5</td>\n",
       "      <td>2.8</td>\n",
       "      <td>-4.06</td>\n",
       "      <td>Enrolled</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3459</th>\n",
       "      <td>4</td>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>27</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>7.6</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.32</td>\n",
       "      <td>Dropout</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>598</th>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>27</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>13.777778</td>\n",
       "      <td>0</td>\n",
       "      <td>10.8</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.74</td>\n",
       "      <td>Graduate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2849</th>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>13.9</td>\n",
       "      <td>-0.3</td>\n",
       "      <td>0.79</td>\n",
       "      <td>Graduate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4363</th>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>7.6</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.32</td>\n",
       "      <td>Dropout</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3611</th>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>13.857143</td>\n",
       "      <td>0</td>\n",
       "      <td>8.9</td>\n",
       "      <td>1.4</td>\n",
       "      <td>3.51</td>\n",
       "      <td>Graduate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Marital status  Application mode  Application order  Course  \\\n",
       "1389               1                 1                  2       6   \n",
       "3315               2                 1                  1      17   \n",
       "1201               2                12                  1       3   \n",
       "3450               1                12                  1      17   \n",
       "1089               1                14                  1       2   \n",
       "3459               4                14                  4      17   \n",
       "598                1                 8                  1      14   \n",
       "2849               1                15                  1       6   \n",
       "4363               1                 8                  3      16   \n",
       "3611               1                 8                  1      14   \n",
       "\n",
       "      Daytime/evening attendance  Previous qualification  Nacionality  \\\n",
       "1389                           1                       1            1   \n",
       "3315                           0                       1            1   \n",
       "1201                           0                      12            1   \n",
       "3450                           0                       1            1   \n",
       "1089                           1                       1            1   \n",
       "3459                           0                       9            1   \n",
       "598                            1                       1            1   \n",
       "2849                           1                      14            1   \n",
       "4363                           1                       1            1   \n",
       "3611                           1                       1            1   \n",
       "\n",
       "      Mother's qualification  Father's qualification  Mother's occupation  \\\n",
       "1389                       1                      14                    4   \n",
       "3315                      22                      14                   10   \n",
       "1201                      22                      27                    5   \n",
       "3450                      22                      27                   10   \n",
       "1089                      13                      14                    6   \n",
       "3459                      22                      27                   10   \n",
       "598                       13                      27                    8   \n",
       "2849                       3                       3                    5   \n",
       "4363                      19                      24                    1   \n",
       "3611                       1                       1                    5   \n",
       "\n",
       "      ...  Curricular units 2nd sem (credited)  \\\n",
       "1389  ...                                    0   \n",
       "3315  ...                                    0   \n",
       "1201  ...                                    0   \n",
       "3450  ...                                    0   \n",
       "1089  ...                                    0   \n",
       "3459  ...                                    0   \n",
       "598   ...                                    0   \n",
       "2849  ...                                    0   \n",
       "4363  ...                                    0   \n",
       "3611  ...                                    0   \n",
       "\n",
       "      Curricular units 2nd sem (enrolled)  \\\n",
       "1389                                    5   \n",
       "3315                                    5   \n",
       "1201                                    6   \n",
       "3450                                    5   \n",
       "1089                                    0   \n",
       "3459                                    5   \n",
       "598                                     6   \n",
       "2849                                    6   \n",
       "4363                                    6   \n",
       "3611                                    6   \n",
       "\n",
       "      Curricular units 2nd sem (evaluations)  \\\n",
       "1389                                      15   \n",
       "3315                                       5   \n",
       "1201                                       7   \n",
       "3450                                       8   \n",
       "1089                                       0   \n",
       "3459                                       5   \n",
       "598                                        9   \n",
       "2849                                       6   \n",
       "4363                                      13   \n",
       "3611                                       7   \n",
       "\n",
       "      Curricular units 2nd sem (approved)  Curricular units 2nd sem (grade)  \\\n",
       "1389                                    3                         10.600000   \n",
       "3315                                    5                         14.200000   \n",
       "1201                                    6                         12.166667   \n",
       "3450                                    5                         12.125000   \n",
       "1089                                    0                          0.000000   \n",
       "3459                                    0                          0.000000   \n",
       "598                                     6                         13.777778   \n",
       "2849                                    5                         13.000000   \n",
       "4363                                    0                          0.000000   \n",
       "3611                                    6                         13.857143   \n",
       "\n",
       "      Curricular units 2nd sem (without evaluations)  Unemployment rate  \\\n",
       "1389                                               4               10.8   \n",
       "3315                                               0                7.6   \n",
       "1201                                               0                9.4   \n",
       "3450                                               0               16.2   \n",
       "1089                                               0               15.5   \n",
       "3459                                               0                7.6   \n",
       "598                                                0               10.8   \n",
       "2849                                               0               13.9   \n",
       "4363                                               0                7.6   \n",
       "3611                                               0                8.9   \n",
       "\n",
       "      Inflation rate   GDP    Target  \n",
       "1389             1.4  1.74  Enrolled  \n",
       "3315             2.6  0.32  Graduate  \n",
       "1201            -0.8 -3.12  Graduate  \n",
       "3450             0.3 -0.92  Enrolled  \n",
       "1089             2.8 -4.06  Enrolled  \n",
       "3459             2.6  0.32   Dropout  \n",
       "598              1.4  1.74  Graduate  \n",
       "2849            -0.3  0.79  Graduate  \n",
       "4363             2.6  0.32   Dropout  \n",
       "3611             1.4  3.51  Graduate  \n",
       "\n",
       "[10 rows x 35 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#исходные данные\n",
    "ds.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "66db7289",
   "metadata": {},
   "outputs": [],
   "source": [
    "#таргет переменную меняем на числовое значение\n",
    "ds['Target'] = ds['Target'].map({\n",
    "    'Dropout':0,\n",
    "    'Enrolled':1,\n",
    "    'Graduate':2\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "fbde76ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "#для преобразования данных, пригодных для создания GNN, оставляем в таблице только 3 столбца\n",
    "#предположим, что связывающими параметрами являются текущий курс, выбранный студентом,\n",
    "#а также предыдущий уровень его образования\n",
    "ds_check = ds[[\"Previous qualification\", \"Course\", \"Target\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "9eb10dfc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Acer\\AppData\\Local\\Temp/ipykernel_15824/2874189922.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  ds_check['Previous qualification'] = ds_check['Previous qualification'].map({\n"
     ]
    }
   ],
   "source": [
    "#числовые столбцы преобразуем в категорические\n",
    "ds_check['Previous qualification'] = ds_check['Previous qualification'].map({\n",
    "    1:'Secondary education',\n",
    "    2:'Higher education—bachelor’s degree',\n",
    "    3:'Higher education—degree',\n",
    "    4:'Higher education—master’s degree',\n",
    "    5:'Higher education—doctorate',\n",
    "    6:'Frequency of higher education',\n",
    "    7:'12th year of schooling—not completed',\n",
    "    8:'11th year of schooling—not completed',\n",
    "    9:'Other—11th year of schooling',\n",
    "    10:'10th year of schooling',\n",
    "    11:'10th year of schooling—not completed',\n",
    "    12:'Basic education 3rd cycle (9th/10th/11th year) or equivalent',\n",
    "    13:'Basic education 2nd cycle (6th/7th/8th year) or equivalent',\n",
    "    14:'Technological specialization course',\n",
    "    15:'Higher education—degree (1st cycle)',\n",
    "    16:'Professional higher technical course',\n",
    "    17:'Higher education—master’s degree (2nd cycle)'\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "12417abe",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Acer\\AppData\\Local\\Temp/ipykernel_15824/1594489951.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  ds_check['Course'] = ds_check['Course'].map({\n"
     ]
    }
   ],
   "source": [
    "ds_check['Course'] = ds_check['Course'].map({\n",
    "    1:'Biofuel Production Technologies',\n",
    "    2:'Animation and Multimedia Design',\n",
    "    3:'Social Service (evening attendance)',\n",
    "    4:'Agronomy',\n",
    "    5:'Communication Design',\n",
    "    6:'Veterinary Nursing',\n",
    "    7:'Informatics Engineering',\n",
    "    8:'Equiniculture',\n",
    "    9:'Management',\n",
    "    10:'Social Service',\n",
    "    11:'Tourism',\n",
    "    12:'Nursing',\n",
    "    13:'Oral Hygiene',\n",
    "    14:'Advertising and Marketing Management',\n",
    "    15:'Journalism and Communication',\n",
    "    16:'Basic Education',\n",
    "    17:'Management (evening attendance)'\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "2b4107f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Previous qualification</th>\n",
       "      <th>Course</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Animation and Multimedia Design</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Tourism</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Communication Design</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Journalism and Communication</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Social Service (evening attendance)</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4419</th>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Journalism and Communication</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4420</th>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Journalism and Communication</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4421</th>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Nursing</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4422</th>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Management</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4423</th>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Journalism and Communication</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4424 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Previous qualification                               Course  Target\n",
       "0       Secondary education      Animation and Multimedia Design       0\n",
       "1       Secondary education                              Tourism       2\n",
       "2       Secondary education                 Communication Design       0\n",
       "3       Secondary education         Journalism and Communication       2\n",
       "4       Secondary education  Social Service (evening attendance)       2\n",
       "...                     ...                                  ...     ...\n",
       "4419    Secondary education         Journalism and Communication       2\n",
       "4420    Secondary education         Journalism and Communication       0\n",
       "4421    Secondary education                              Nursing       0\n",
       "4422    Secondary education                           Management       2\n",
       "4423    Secondary education         Journalism and Communication       2\n",
       "\n",
       "[4424 rows x 3 columns]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds_check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ffe4d568",
   "metadata": {},
   "outputs": [],
   "source": [
    "#для создания модели GNN был выбран PyTorch Geometric\n",
    "#он принимает в себя объект данных, который должен включать в себя вершины и связи между ними\n",
    "#то, в каком виде сейчас представлены наши данные, очевидно, под нашу модель не подходит, поэтому их нужно преобразовать\n",
    "def preprocess_data(data):\n",
    "\n",
    "    vectorizer = CountVectorizer(token_pattern=r'\\b\\w+\\b')\n",
    "    qual_features = vectorizer.fit_transform(data['Previous qualification'])\n",
    "    course_features = vectorizer.fit_transform(data['Course'])\n",
    "    #print(qual_features)\n",
    "    scaler = StandardScaler()\n",
    "    qual_features = scaler.fit_transform(qual_features.toarray())\n",
    "    course_features = scaler.fit_transform(course_features.toarray())\n",
    "    #print(qual_features)\n",
    "    \n",
    "    X = np.concatenate((qual_features, course_features), axis=1)\n",
    "    y = data['Target']\n",
    "    \n",
    "    #стандартный процесс разделения данных на обучающий и тестовый\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    \n",
    "    column_names = list(data.columns)[:-1]  #исключаем таргетную переменную\n",
    "    processed_data = pd.DataFrame({col: X_train[:, i] for i, col in enumerate(column_names)})\n",
    "    processed_data['Target'] = y_train\n",
    " \n",
    "    return processed_data, X_test, y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "336ba408",
   "metadata": {},
   "outputs": [],
   "source": [
    "processed_data, X_test, y_test = preprocess_data(ds_check)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "3d0892bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_graph_representation(data):\n",
    "    edge_index = np.array([[i, i] for i in range(len(data))]).T\n",
    "    x = torch.tensor(data.drop(['Target'], axis=1).values, dtype=torch.float)\n",
    "    y = torch.tensor(data['Target'].values, dtype=torch.long)\n",
    "    return Data(x=x, edge_index=edge_index, y=y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "369c4681",
   "metadata": {},
   "outputs": [],
   "source": [
    "graph_data = create_graph_representation(processed_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a346cee6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#создаем модель GNN, используя torch.nn\n",
    "class GNNModel(nn.Module):\n",
    "    def __init__(self, input_dim, hidden_dim, output_dim):\n",
    "        super(GNNModel, self).__init__()\n",
    "        self.conv1 = GCNConv(input_dim, hidden_dim)\n",
    "        self.conv2 = GCNConv(hidden_dim, output_dim)\n",
    "\n",
    "    def forward(self, x, edge_index):\n",
    "        x = self.conv1(x, edge_index)\n",
    "        x = F.relu(x)\n",
    "        x = self.conv2(x, edge_index)\n",
    "        return F.log_softmax(x, dim=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "c07a6ab6",
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "00082efe",
   "metadata": {},
   "outputs": [],
   "source": [
    "input_dim = graph_data.num_node_features\n",
    "hidden_dim = 64\n",
    "output_dim = len(processed_data['Target'].unique())\n",
    "model = GNNModel(input_dim, hidden_dim, output_dim).to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "8fe84dbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "criterion = nn.NLLLoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b2cdf37a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def collate_fn(batch):\n",
    "    return batch\n",
    "\n",
    "#Создаем DataLoader\n",
    "data_loader = DataLoader([graph_data], batch_size=1, shuffle=True, collate_fn=collate_fn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "c354e6ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "def collate_fn(batch):\n",
    "    x = [data.x for data in batch]\n",
    "    edge_index = [data.edge_index for data in batch]\n",
    "    y = [data.y for data in batch]\n",
    "    return {'x': x, 'edge_index': edge_index, 'y': y}\n",
    "\n",
    "# Конвертируем графические данные в PyTorch DataLoader\n",
    "data_loader = DataLoader([graph_data], batch_size=1, collate_fn=collate_fn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "73c6f397",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 77.37%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Acer\\AppData\\Local\\Temp/ipykernel_15824/2991986712.py:5: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
      "  x = torch.tensor(data['x'][0], dtype=torch.float).to(device)\n",
      "C:\\Users\\Acer\\AppData\\Local\\Temp/ipykernel_15824/2991986712.py:7: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
      "  y = torch.tensor(data['y'][0], dtype=torch.float).to(device)\n"
     ]
    }
   ],
   "source": [
    "total_correct = 0\n",
    "total_samples = 0\n",
    "\n",
    "for data in data_loader:\n",
    "    x = torch.tensor(data['x'][0], dtype=torch.float).to(device)\n",
    "    edge_index = torch.tensor(data['edge_index'][0], dtype=torch.long).to(device)\n",
    "    y = torch.tensor(data['y'][0], dtype=torch.float).to(device)\n",
    "\n",
    "    y_min = torch.min(y)\n",
    "    y_max = torch.max(y)\n",
    "    y_normalized = (y - y_min) / (y_max - y_min)\n",
    "\n",
    "    optimizer.zero_grad()\n",
    "    out = model(x, edge_index)\n",
    "    _, predicted = torch.max(out, dim=1)\n",
    "    total_correct += (predicted == y_normalized).sum().item()\n",
    "    total_samples += y_normalized.size(0)\n",
    "\n",
    "\n",
    "    y_normalized = y_normalized.long()\n",
    "\n",
    "    loss = criterion(out, y_normalized)\n",
    "    loss.backward()\n",
    "    optimizer.step()\n",
    "    \n",
    "accuracy = total_correct / total_samples\n",
    "print(f\"Accuracy: {accuracy * 100:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "5b13fe96",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 77.37%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Acer\\AppData\\Local\\Temp/ipykernel_15824/2980915445.py:7: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
      "  x = torch.tensor(data['x'][0], dtype=torch.float).to(device)\n",
      "C:\\Users\\Acer\\AppData\\Local\\Temp/ipykernel_15824/2980915445.py:9: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
      "  y = torch.tensor(data['y'][0], dtype=torch.float).to(device)\n"
     ]
    }
   ],
   "source": [
    "model.eval()\n",
    "total_correct = 0\n",
    "total_samples = 0\n",
    "\n",
    "with torch.no_grad():\n",
    "    for data in data_loader:\n",
    "        x = torch.tensor(data['x'][0], dtype=torch.float).to(device)\n",
    "        edge_index = torch.tensor(data['edge_index'][0], dtype=torch.long).to(device)\n",
    "        y = torch.tensor(data['y'][0], dtype=torch.float).to(device)\n",
    "\n",
    "        y_min = torch.min(y)\n",
    "        y_max = torch.max(y)\n",
    "        y_normalized = (y - y_min) / (y_max - y_min)\n",
    "\n",
    "        out = model(x, edge_index)\n",
    "        _, predicted = torch.max(out, dim=1)\n",
    "        total_correct += (predicted == y_normalized).sum().item()\n",
    "        total_samples += y_normalized.size(0)\n",
    "\n",
    "accuracy = total_correct / total_samples\n",
    "print(f\"Accuracy: {accuracy * 100:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "5c1e4d24",
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch_geometric.explain import Explainer, GNNExplainer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "f5d11ea6",
   "metadata": {},
   "outputs": [],
   "source": [
    "explainer = Explainer(\n",
    "    model=model,\n",
    "    algorithm=GNNExplainer(epochs=200),\n",
    "    explanation_type='model',\n",
    "    node_mask_type='attributes',\n",
    "    edge_mask_type='object',\n",
    "    model_config=dict(\n",
    "        mode='multiclass_classification',\n",
    "        task_level='node',\n",
    "        return_type='log_probs',\n",
    "    ),\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "240e816d",
   "metadata": {},
   "outputs": [],
   "source": [
    "d_i = torch.from_numpy(graph_data.edge_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "b7028bb0",
   "metadata": {},
   "outputs": [],
   "source": [
    "explanation = explainer(graph_data.x, d_i, index=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "27c8f213",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "explanation.visualize_feature_importance(top_k=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d65f60b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
